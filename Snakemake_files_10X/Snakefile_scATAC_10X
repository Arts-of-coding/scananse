configfile:
    "config_scATAC_10X.yaml"

#######################################################################################
#rule all for the first block

#fin2 = ['_1', '_2', '_3', '_4']

#outfiles = []
#for x in config["samples"]:
 #   for y in fin2:
  #      ## Here you pair f1 and f2. This is a very trivial way of doing it:
   #     if y[1] in x:
    #        outfiles.append(config["data"]+ 'fastq_snakemake/%s%s.fastq' % (x, y))

#wildcard_constraints:
 #   f1 = '|'.join([re.escape(x) for x in config["samples"]]),
  #  f2 = [x for x in fin2],

#rule all:
 #   input:
  #      outfiles,
#######################################################################################
#rule all for the first + second block

#fin3 = ['_S1_L001_I1_001', '_S1_L001_R1_001', '_S1_L001_R2_001', '_S1_L001_R3_001']

#outfiles = []
#for x in config["samples"]:
 #   for y in fin3:
        ## Here you pair f1 and f2. This is a very trivial way of doing it:
  #      if y[1] in x:
   #         outfiles.append(config["data"]+ 'fastq_snakemake/%s%s.fastq' % (x, y))

#wildcard_constraints:
 #   f1 = '|'.join([re.escape(x) for x in config["samples"]]),
  #  f2 = [x for x in fin3],

#rule all:
 #   input:
  #      outfiles,

########################################################################################

#######################################################################################
#rule all for the first, second and third block

fin3 = ['peaks.bed','matrix.mtx','barcodes.tsv','junk.tsv']

outfiles = []
for x in config["samples"]:
    for y in fin3:
        ## Here you pair f1 and f2. This is a very trivial way of doing it:
        outfiles.append(config["cellrangerpath"]+ 'cellranger-atac-2.0.0/scATAC%s/outs/filtered_peak_bc_matrix/%s' % (x, y))
        #if y[1] in x:
         #   print(y)
           # outfiles.append(config["cellrangerpath"]+ 'cellranger-atac-2.0.0/junk/scATAC%s/outs/filtered_feature_bc_matrix/%s.gz' % (x, y))
print(outfiles)

wildcard_constraints:
    f1 = '|'.join([re.escape(x) for x in config["samples"]]),
    f2 = [x for x in fin3],

print('|'.join([re.escape(x) for x in config["samples"]]))
print([x for x in fin3])
rule all:
    input:
        outfiles,

#######################################################################################

rule split_files: 
    input:
        expand(config["data"]+ 'SRA_snakemake/{sam}.sra', sam = config["samples"])

    output:
        config["data"]+ 'fastq_snakemake/{f1}_1.fastq',
        config["data"]+ 'fastq_snakemake/{f1}_2.fastq',
        config["data"]+ 'fastq_snakemake/{f1}_3.fastq',
        config["data"]+ 'fastq_snakemake/{f1}_4.fastq',
        #outfiles,

    params:
        outputs = config["data"]+ "fastq_snakemake",

    shell:
        "fastq-dump --outdir {params.outputs} -I --split-files {input}"

rule rename_naming_convention:
    input:
        unam1= config["data"]+ 'fastq_snakemake/{f1}_1.fastq',
        unam2= config["data"]+ 'fastq_snakemake/{f1}_2.fastq',
        unam3= config["data"]+ 'fastq_snakemake/{f1}_3.fastq',
        unam4= config["data"]+ 'fastq_snakemake/{f1}_4.fastq',
    output:
        renam1= config["data"]+ 'fastq_snakemake/{f1}_S1_L001_I1_001.fastq',
        renam2= config["data"]+ 'fastq_snakemake/{f1}_S1_L001_R1_001.fastq',
        renam3= config["data"]+ 'fastq_snakemake/{f1}_S1_L001_R2_001.fastq',
        renam4= config["data"]+ 'fastq_snakemake/{f1}_S1_L001_R3_001.fastq',

    params:
        renam1 = lambda wildcards, output: output.renam1.replace('_S1_L001_I1_001', '_1'),
        renam2 = lambda wildcards, output: output.renam2.replace('_S1_L001_R1_001', '_2'),
        renam3 = lambda wildcards, output: output.renam3.replace('_S1_L001_R2_001', '_3'),
        renam4 = lambda wildcards, output: output.renam4.replace('_S1_L001_R3_001', '_4'),

    shell:
        """
        mv {params.renam1} {output.renam1} ; mv {params.renam2} {output.renam2}  ; mv {params.renam3} {output.renam3} ; mv {params.renam4} {output.renam4}
        """
# sed command is used because the header of the fastq files consists of double points: ".1.3" instead of ".1" check this with new datasets

rule cellranger_scrna: 
    input:
        config["data"]+ 'fastq_snakemake/{f1}_S1_L001_I1_001.fastq',
        config["data"]+ 'fastq_snakemake/{f1}_S1_L001_R1_001.fastq',
        config["data"]+ 'fastq_snakemake/{f1}_S1_L001_R2_001.fastq',
        config["data"]+ 'fastq_snakemake/{f1}_S1_L001_R3_001.fastq',

    output:
        config["cellrangerpath"]+ 'cellranger-atac-2.0.0/scATAC{f1}/outs/filtered_peak_bc_matrix/peaks.bed',
        config["cellrangerpath"]+ 'cellranger-atac-2.0.0/scATAC{f1}/outs/filtered_peak_bc_matrix/matrix.mtx',
        config["cellrangerpath"]+ 'cellranger-atac-2.0.0/scATAC{f1}/outs/filtered_peak_bc_matrix/barcodes.tsv',
        config["cellrangerpath"]+ 'cellranger-atac-2.0.0/scATAC{f1}/outs/filtered_peak_bc_matrix/junk.tsv',
        #outfiles,

    params:
        outputs1 = config["cellrangerpath"]+ "cellranger-atac-2.0.0",
        outputs2 = config["cellrangerpath"]+ "refdata-cellranger-arc-GRCh38-2020-A-2.0.0/",
        outputs3 = config["data"]+ "fastq_snakemake",

    shell:
        """
        export PATH={params.outputs1}:$PATH
        cellranger-atac count --id={wildcards.f1} --reference={params.outputs2} --fastqs={params.outputs3} --sample={wildcards.f1} --localcores=24 --localmem=100 --noexit
        """